#!/usr/bin/env python3
"""
Cloudflare Tunnel Webhook Manager com Sistema de Banco de Dados
Vers√£o integrada com salvamento autom√°tico em SQLite
"""

import subprocess
import threading
import time
import json
import os
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
import requests
import platform

# Importar nosso sistema de banco
from database_manager import WhatsAppDatabaseManager


class CloudflareWebhookManagerDB:
    """Gerenciador profissional do Cloudflare Tunnel com banco de dados"""

    def __init__(self, port=5000, db_path="whatsapp_webhook.db"):
        self.port = port
        self.db_path = db_path
        self.tunnel_url = None
        self.tunnel_process = None
        self.app = Flask(__name__)
        self.requests_log = []
        self.is_running = False

        # Inicializar banco de dados
        print(f"üóÑÔ∏è  Inicializando banco de dados: {db_path}")
        self.db_manager = WhatsAppDatabaseManager(db_path)
        print(f"‚úÖ Banco de dados pronto!")

        # Configurar rotas do Flask
        self._setup_routes()

    def _setup_routes(self):
        """Configura as rotas do webhook"""

        @self.app.route('/webhook', methods=['GET', 'POST', 'PUT', 'DELETE'])
        def webhook():
            """Endpoint principal do webhook"""
            request_data = {
                'timestamp': datetime.now().isoformat(),
                'method': request.method,
                'url': request.url,
                'headers': dict(request.headers),
                'args': dict(request.args),
                'json': request.get_json(silent=True),
                'form': dict(request.form),
                'data': request.get_data(as_text=True)
            }

            # Salvar requisi√ß√£o no log tempor√°rio
            self.requests_log.append(request_data)

            # Se for webhook do WhatsApp, salvar no banco
            webhook_json = request.get_json(silent=True)
            if webhook_json and self._is_whatsapp_webhook(webhook_json):
                saved = self.db_manager.save_webhook_data(webhook_json)
                if saved:
                    print(f"üíæ Dados salvos no banco de dados")
                else:
                    print(f"‚ö†Ô∏è  Dados n√£o salvos (possivelmente duplicados)")

            # Log no console
            print(f"\nüì® NOVA REQUISI√á√ÉO [{request.method}] - {datetime.now().strftime('%H:%M:%S')}")
            print(f"üîó URL: {request.url}")
            if webhook_json:
                json_str = json.dumps(webhook_json, indent=2, ensure_ascii=False)
                print(f"üìã JSON: {json_str[:500]}{'...' if len(json_str) > 500 else ''}")

            return jsonify({
                'status': 'success',
                'message': 'Webhook recebido com sucesso',
                'timestamp': datetime.now().isoformat(),
                'saved_to_database': webhook_json and self._is_whatsapp_webhook(webhook_json)
            })

        @self.app.route('/requests', methods=['GET'])
        def get_requests():
            """Retorna todas as requisi√ß√µes capturadas"""
            return jsonify({
                'total': len(self.requests_log),
                'requests': self.requests_log
            })

        @self.app.route('/requests/clear', methods=['POST'])
        def clear_requests():
            """Limpa o log de requisi√ß√µes"""
            self.requests_log.clear()
            return jsonify({'message': 'Log limpo com sucesso'})

        @self.app.route('/status', methods=['GET'])
        def status():
            """Status do webhook"""
            db_info = self.db_manager.get_database_info()
            return jsonify({
                'status': 'online',
                'tunnel_url': self.tunnel_url,
                'port': self.port,
                'requests_count': len(self.requests_log),
                'database_info': db_info,
                'uptime': datetime.now().isoformat()
            })

        # === ROTAS DO BANCO DE DADOS ===

        @self.app.route('/db/messages', methods=['GET'])
        def get_messages():
            """Retorna mensagens do banco de dados"""
            limit = int(request.args.get('limit', 50))
            messages = self.db_manager.get_recent_messages(limit)
            return jsonify({
                'total': len(messages),
                'messages': messages
            })

        @self.app.route('/db/stats/daily', methods=['GET'])
        def get_daily_stats():
            """Retorna estat√≠sticas di√°rias"""
            days = int(request.args.get('days', 7))
            stats = self.db_manager.get_daily_stats(days)
            return jsonify({
                'period_days': days,
                'stats': stats
            })

        @self.app.route('/db/stats/contacts', methods=['GET'])
        def get_contact_stats():
            """Retorna estat√≠sticas de contatos"""
            limit = int(request.args.get('limit', 20))
            contacts = self.db_manager.get_contact_stats(limit)
            return jsonify({
                'total': len(contacts),
                'contacts': contacts
            })

        @self.app.route('/db/search', methods=['GET'])
        def search_messages():
            """Busca mensagens com filtros"""
            text = request.args.get('text')
            contact_id = request.args.get('contact_id')
            message_type = request.args.get('message_type')
            from_me = request.args.get('from_me')
            is_group = request.args.get('is_group')
            days_back = int(request.args.get('days_back', 30))
            limit = int(request.args.get('limit', 100))

            # Converter strings para boolean
            if from_me is not None:
                from_me = from_me.lower() == 'true'
            if is_group is not None:
                is_group = is_group.lower() == 'true'

            messages = self.db_manager.search_messages(
                text=text,
                contact_id=contact_id,
                message_type=message_type,
                from_me=from_me,
                is_group=is_group,
                days_back=days_back,
                limit=limit
            )

            return jsonify({
                'total': len(messages),
                'filters': {
                    'text': text,
                    'contact_id': contact_id,
                    'message_type': message_type,
                    'from_me': from_me,
                    'is_group': is_group,
                    'days_back': days_back,
                    'limit': limit
                },
                'messages': messages
            })

        @self.app.route('/db/info', methods=['GET'])
        def get_db_info():
            """Informa√ß√µes detalhadas do banco"""
            return jsonify(self.db_manager.get_database_info())

    def _is_whatsapp_webhook(self, data):
        """Verifica se √© um webhook v√°lido do WhatsApp"""
        if not isinstance(data, dict):
            return False

        required_fields = ['event', 'instanceId', 'messageId']
        return all(field in data for field in required_fields)

    def check_cloudflared(self):
        """Verifica se cloudflared est√° instalado"""
        try:
            cmd = 'cloudflared.exe' if platform.system() == 'Windows' else 'cloudflared'
            result = subprocess.run([cmd, '--version'],
                                    capture_output=True, text=True, timeout=10)
            return result.returncode == 0
        except:
            return False

    def install_guide(self):
        """Mostra guia de instala√ß√£o"""
        system = platform.system()

        print("\nüì¶ CLOUDFLARED N√ÉO ENCONTRADO")
        print("=" * 40)

        if system == "Windows":
            print("ü™ü WINDOWS:")
            print("1. Baixe: https://github.com/cloudflare/cloudflared/releases/latest")
            print("2. Procure: cloudflared-windows-amd64.exe")
            print("3. Renomeie para: cloudflared.exe")
            print("4. Coloque na pasta do script")

        elif system == "Linux":
            print("üêß LINUX:")
            print("wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64")
            print("sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared")
            print("sudo chmod +x /usr/local/bin/cloudflared")

        elif system == "Darwin":
            print("üçé MACOS:")
            print("brew install cloudflared")

        print("\nüîÑ Execute o script novamente ap√≥s instalar")

    def create_tunnel(self):
        """Cria o t√∫nel do Cloudflare"""
        if not self.check_cloudflared():
            self.install_guide()
            return False

        print(f"\nüöÄ CRIANDO T√öNEL...")
        print(f"üîå Porta local: {self.port}")

        try:
            cmd = 'cloudflared.exe' if platform.system() == 'Windows' else 'cloudflared'
            command = [cmd, 'tunnel', '--url', f'http://localhost:{self.port}']

            self.tunnel_process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1
            )

            # Aguardar URL do t√∫nel
            timeout = 30
            start_time = time.time()

            while (time.time() - start_time) < timeout:
                line = self.tunnel_process.stdout.readline()

                if line and 'trycloudflare.com' in line:
                    words = line.split()
                    for word in words:
                        if 'https://' in word and 'trycloudflare.com' in word:
                            self.tunnel_url = word.strip()
                            print(f"‚úÖ T√öNEL CRIADO: {self.tunnel_url}")
                            return True

                if self.tunnel_process.poll() is not None:
                    print("‚ùå Erro ao criar t√∫nel")
                    return False

                time.sleep(0.5)

            print("‚ùå Timeout ao criar t√∫nel")
            return False

        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False

    def start_webhook_server(self):
        """Inicia o servidor webhook"""
        print(f"\nüåê INICIANDO SERVIDOR WEBHOOK...")
        print(f"üìç Porta: {self.port}")
        print(f"üóÑÔ∏è  Banco: {self.db_path}")

        # Iniciar Flask em thread separada
        def run_flask():
            self.app.run(host='0.0.0.0', port=self.port, debug=False, use_reloader=False)

        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()

        # Aguardar servidor iniciar
        time.sleep(2)

        try:
            response = requests.get(f'http://localhost:{self.port}/status', timeout=5)
            if response.status_code == 200:
                print("‚úÖ Servidor webhook iniciado")
                return True
        except:
            pass

        print("‚ùå Erro ao iniciar servidor")
        return False

    def show_info(self):
        """Mostra informa√ß√µes do webhook"""
        if not self.tunnel_url:
            print("‚ùå T√∫nel n√£o est√° ativo")
            return

        print("\n" + "=" * 70)
        print("üéâ WEBHOOK CLOUDFLARE + BANCO DE DADOS ATIVO!")
        print("=" * 70)
        print(f"üåê URL P√∫blica: {self.tunnel_url}")
        print(f"üì® Webhook: {self.tunnel_url}/webhook")
        print(f"üóÑÔ∏è  Banco: {self.db_path}")

        print(f"\nüìä ENDPOINTS DO BANCO:")
        print(f"‚Ä¢ Mensagens: GET {self.tunnel_url}/db/messages?limit=100")
        print(f"‚Ä¢ Stats di√°rias: GET {self.tunnel_url}/db/stats/daily?days=7")
        print(f"‚Ä¢ Stats contatos: GET {self.tunnel_url}/db/stats/contacts?limit=20")
        print(f"‚Ä¢ Buscar: GET {self.tunnel_url}/db/search?text=ola&days_back=30")
        print(f"‚Ä¢ Info BD: GET {self.tunnel_url}/db/info")

        print(f"\nüìã ENDPOINTS B√ÅSICOS:")
        print(f"‚Ä¢ Requisi√ß√µes: GET {self.tunnel_url}/requests")
        print(f"‚Ä¢ Limpar log: POST {self.tunnel_url}/requests/clear")
        print(f"‚Ä¢ Status: GET {self.tunnel_url}/status")

        print(f"\nüß™ TESTE R√ÅPIDO:")
        print(f"curl -X POST {self.tunnel_url}/webhook \\")
        print(f'  -H "Content-Type: application/json" \\')
        print(f'  -d \'{{"event": "test", "instanceId": "test", "messageId": "test123"}}\'')

        print("=" * 70)

    def monitor_requests(self):
        """Monitora requisi√ß√µes em tempo real"""
        print(f"\nüìä MONITORANDO WEBHOOKS + BANCO DE DADOS...")
        print(f"üîó Webhook: {self.tunnel_url}/webhook")
        print(f"üóÑÔ∏è  Banco: {self.db_path}")
        print("üí° Pressione Ctrl+C para parar")
        print("-" * 50)

        last_count = 0
        last_db_count = 0

        try:
            while True:
                current_count = len(self.requests_log)

                # Verificar requisi√ß√µes
                if current_count > last_count:
                    print(f"üì® Nova requisi√ß√£o! Total: {current_count}")
                    if self.requests_log:
                        last_req = self.requests_log[-1]
                        print(f"   [{last_req['method']}] {last_req['timestamp']}")
                    last_count = current_count

                # Verificar banco de dados
                try:
                    db_info = self.db_manager.get_database_info()
                    current_db_count = db_info.get('total_events', 0)

                    if current_db_count > last_db_count:
                        print(f"üíæ Nova mensagem no banco! Total: {current_db_count}")
                        print(f"   üìä Tamanho BD: {db_info.get('database_size_mb', 0)} MB")
                        last_db_count = current_db_count
                except Exception as e:
                    print(f"‚ö†Ô∏è  Erro ao verificar BD: {e}")

                time.sleep(1)

        except KeyboardInterrupt:
            print(f"\nüëã Monitoramento interrompido")

    def stop_tunnel(self):
        """Para o t√∫nel"""
        if self.tunnel_process:
            print("\nüõë Parando t√∫nel...")
            self.tunnel_process.terminate()
            try:
                self.tunnel_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.tunnel_process.kill()
            print("‚úÖ T√∫nel parado")

        self.tunnel_process = None
        self.tunnel_url = None

    def run(self):
        """Executa o webhook manager completo"""
        print("‚òÅÔ∏è  CLOUDFLARE TUNNEL WEBHOOK + DATABASE MANAGER")
        print("=" * 60)

        # 1. Iniciar servidor webhook
        if not self.start_webhook_server():
            return False

        # 2. Criar t√∫nel
        if not self.create_tunnel():
            return False

        # 3. Mostrar informa√ß√µes
        self.show_info()

        # 4. Monitorar
        try:
            self.monitor_requests()
        except KeyboardInterrupt:
            pass
        finally:
            self.stop_tunnel()

        return True


def main():
    """Fun√ß√£o principal"""
    import argparse

    parser = argparse.ArgumentParser(description='Cloudflare Tunnel Webhook + Database Manager')
    parser.add_argument('--port', '-p', type=int, default=5000, help='Porta local (padr√£o: 5000)')
    parser.add_argument('--db', '-d', type=str, default="whatsapp_webhook.db",
                        help='Arquivo do banco (padr√£o: whatsapp_webhook.db)')
    args = parser.parse_args()

    manager = CloudflareWebhookManagerDB(port=args.port, db_path=args.db)

    try:
        manager.run()
    except KeyboardInterrupt:
        print(f"\nüëã Finalizando...")
        manager.stop_tunnel()


if __name__ == '__main__':
    main()

# =============================================================================
# üöÄ COMO USAR:
# =============================================================================
#
# 1. INSTALAR DEPEND√äNCIAS:
#    pip install flask requests sqlalchemy
#
# 2. EXECUTAR:
#    python webhook_with_database.py
#    ou
#    python webhook_with_database.py --port 8000 --db meu_banco.db
#
# 3. NOVOS ENDPOINTS DO BANCO:
#    ‚Ä¢ GET {url}/db/messages?limit=100 - √öltimas mensagens
#    ‚Ä¢ GET {url}/db/stats/daily?days=7 - Estat√≠sticas di√°rias
#    ‚Ä¢ GET {url}/db/stats/contacts?limit=20 - Top contatos
#    ‚Ä¢ GET {url}/db/search?text=ola&contact_id=556999267344 - Busca avan√ßada
#    ‚Ä¢ GET {url}/db/info - Informa√ß√µes do banco
#
# 4. EXEMPLOS DE BUSCA:
#    ‚Ä¢ Buscar por texto: /db/search?text=bom%20dia
#    ‚Ä¢ Mensagens enviadas: /db/search?from_me=true
#    ‚Ä¢ S√≥ grupos: /db/search?is_group=true
#    ‚Ä¢ Por contato: /db/search?contact_id=556999267344
#    ‚Ä¢ S√≥ stickers: /db/search?message_type=sticker
#    ‚Ä¢ √öltimos 7 dias: /db/search?days_back=7
#
# 5. BANCO DE DADOS:
#    ‚Ä¢ SQLite local (arquivo .db)
#    ‚Ä¢ Tabelas: webhook_events, chats, senders, message_contents, stats
#    ‚Ä¢ Indexado para busca r√°pida
#    ‚Ä¢ Backup autom√°tico do JSON original
#    ‚Ä¢ Estat√≠sticas em tempo real
#
# =============================================================================